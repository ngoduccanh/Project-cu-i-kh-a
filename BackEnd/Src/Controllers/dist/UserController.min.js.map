{"version":3,"sources":["UserController.js"],"names":["_User","_interopRequireDefault","require","_bcrypt","_uuid","_crypto","usersController","register","req","res","_req$body","email","password","newAccont","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","json","error","awrap","User","findOne","sent","save","message","stop","login","_req$body2","user","randomString","apiKey","_context2","bcrypt","compare","randomBytes","concat","FindEmail","t0","console","CreatUser","_req$body3","username","avatar","bio","age","gender","newUser","_context3","id","v4","UserInfor","profileCreated","_context4","_req$body4","userId","_context5","params","findById","checkPassword","_id"],"mappings":"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","file":"UserController.min.js","sourcesContent":["import User from \"../Model/User.js\";\r\nimport bcrypt from 'bcrypt'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {randomBytes} from 'crypto'\r\nconst usersController = {\r\n    register: async (req,res) =>{\r\n        const {email,password}= req.body\r\n        if (!email || !password) {\r\n          return res.status(400).json({ error: 'Email và password là bắt buộc' });\r\n        }\r\n        const FindEmail = await User.findOne({email})\r\n          if(FindEmail){\r\n            return res.status(404).json({ error: 'Email đã tồn tại' });\r\n        }\r\n        const newAccont = new User({\r\n            email,\r\n            password,\r\n        })\r\n        await newAccont.save();\r\n        return res.status(200).json({\r\n            message: 'Đăng kí thành công.',\r\n            newAccont,\r\n          });\r\n    },\r\n    login: async (req, res) => {\r\n        const { email, password } = req.body;\r\n        if (!email || !password) {\r\n          return res.status(400).json({ error: 'Email và password là bắt buộc' });\r\n        }\r\n        try {\r\n          const user = await User.findOne({ email });\r\n          if (!user) {\r\n            return res.status(404).json({ error: 'Email không tồn tại.' });\r\n          }\r\n          const checkPassword = await bcrypt.compare(password, user.password);\r\n          if (!checkPassword) {\r\n            return res.status(401).json({ error: 'Sai mật khẩu.' });\r\n          }\r\n        const randomString = randomBytes(16).toString('hex');\r\n        const apiKey = `mern-${user.id}-${user.email}-${randomString}`;\r\n          return res.status(200).json({\r\n            message: 'Đăng nhập thành công.',\r\n            user,\r\n            apiKey,\r\n          });\r\n        } catch (error) {\r\n          console.error(error);\r\n          return res.status(500).json({ error: 'Lỗi hệ thống' });\r\n        }\r\n      },\r\n    CreatUser: async (req,res) => {\r\n        const {username,avatar,bio,age,gender} = req.body\r\n        if (!username){\r\n            return res.status(400).json({\r\n                message: 'username không được để trống '\r\n            })\r\n        }\r\n        try{\r\n        const newUser = new User({\r\n            username,\r\n            age,\r\n            gender,\r\n            avatar,\r\n            bio\r\n        })\r\n        await newUser.save();\r\n        res.status(201).json({\r\n            message: \"Tạo mới User thành công\",\r\n            user: {\r\n                id: uuidv4(),\r\n                username: newUser.username,\r\n            }\r\n        })\r\n        }catch(error){\r\n            console.error(error);\r\n        return res.status(500).json({error:\" Lỗi hệ thống\"})\r\n        }\r\n    },\r\n    UserInfor: async (req, res) => {\r\n      try {\r\n        const user = req.user; \r\n        if (!user) {\r\n          return res.status(404).json({ message: \"Không tìm thấy người dùng\" });\r\n        }\r\n        const profileCreated = user.username && user.age;\r\n    \r\n        res.json({\r\n          profileCreated: !!profileCreated,\r\n          user: {\r\n            username: user.username,\r\n            avatar: user.avatar,\r\n            age: user.age,\r\n            gender: user.gender,\r\n            bio: user.bio,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: \"Lỗi khi lấy thông tin user\" });\r\n      }\r\n    },\r\n    UpdateUser: async (req,res) =>{\r\n        const {username,avatar,bio,age,gender} = req.body\r\n        const userId = req.params.userId\r\n        if(!username) {\r\n            res.status(400).json({\r\n                message: \"username không được để trống\"\r\n            })\r\n        }\r\n        try {\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n        return res.status(404).json({ message: \"User không tồn tại\" });\r\n        }\r\n        user.username = username;\r\n        if(age) user.age = age;\r\n        if(gender) user.gender = gender;\r\n        if (avatar) user.avatar = avatar;\r\n        if (bio) user.bio = bio;\r\n        await user.save();\r\n        res.status(200).json({\r\n            message: 'Cập nhật user thành công',\r\n            user: {\r\n              id: user._id,\r\n              username: user.username,\r\n            }\r\n          });\r\n        }catch(error){\r\n            console.error(error);\r\n            res.status(500).json({ error: 'Lỗi hệ thống' });\r\n\r\n        }\r\n    }\r\n}\r\nexport default usersController"]}
{"version":3,"sources":["PostController.js"],"names":["PostController","createPost","req","res","body","image","caption","status","json","error","newPost","Post","author","user","_id","likes","comments","save","message","post","getAllPosts","find","populate","path","select","sort","createdAt","posts","getUserPosts","userId","createComment","postId","text","comment","Comment","findById","push","populatedComment","console","getComments","params","DeleteComment","commentId","toString","findByIdAndUpdate","$pull","findByIdAndDelete","DeletePost","deleteMany","$in"],"mappings":"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","sourcesContent":["import Post from \"../Model/Post.js\"\r\nimport Comment from \"../Model/Comment.js\"\r\n const PostController = {\r\n     createPost: async (req, res) => {\r\n        const { image, caption } = req.body;\r\n        if (!caption) return res.status(400).json({ error: 'Image bắt buộc' });\r\n      \r\n        try {\r\n          const newPost = new Post({\r\n            author: req.user._id,\r\n            image,\r\n            caption,\r\n            likes: [],\r\n            comments: []\r\n          });\r\n          await newPost.save();\r\n          res.status(201).json({ message: 'Tạo post thành công', post: newPost });\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi tạo post' });\r\n        }\r\n      },\r\n      getAllPosts: async (req, res) => {\r\n        try {\r\n          const posts = await Post.find()\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n      \r\n          res.json(posts);\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts' });\r\n        }\r\n      },\r\n      getUserPosts: async (req, res) => {\r\n        try {\r\n          const userId = req.user._id;  \r\n          const posts = await Post.find({ author: userId })\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n          res.json({ posts }); \r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts của user' });\r\n        }\r\n      },\r\n      createComment: async (req, res) => {\r\n        const { postId, text } = req.body;\r\n        if (!text) return res.status(400).json({ error: 'Text bắt buộc' });\r\n      \r\n        try {\r\n          const comment = new Comment({\r\n            post: postId,\r\n            author: req.user._id,\r\n            text\r\n          });\r\n          await comment.save();\r\n      \r\n          const post = await Post.findById(postId);\r\n          post.comments.push(comment._id);\r\n          await post.save();\r\n          const populatedComment = await Comment.findById(comment._id)\r\n            .populate(\"author\", \"username avatar\");\r\n      \r\n          res.status(201).json({\r\n            message: 'Tạo comment thành công',\r\n            comment: populatedComment\r\n          });\r\n        } catch (err) {\r\n          console.error(err);\r\n          res.status(500).json({ error: 'Lỗi khi tạo comment' });\r\n        }\r\n      },\r\n          getComments: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const comments = await Comment.find({ post: postId })\r\n              .populate('author', ['username', 'avatar'])\r\n              res.status(200).json(comments);\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi lấy bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi khi lấy bình luận\" });\r\n            }\r\n          },\r\n          DeleteComment: async (req, res) => {\r\n            const commentId = req.params.commentId;\r\n          \r\n            try {\r\n              const comment = await Comment.findById(commentId);\r\n              if (!comment) return res.status(404).json({ message: \"Không tìm thấy bình luận\" });\r\n              if (comment.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bình luận này\" });\r\n              }\r\n              await Post.findByIdAndUpdate(comment.post, {\r\n                $pull: { comments: comment._id }\r\n              });\r\n              await Comment.findByIdAndDelete(commentId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bình luận thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bình luận\" });\r\n            }\r\n          },\r\n          DeletePost: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const post = await Post.findById(postId);\r\n              if (!post) {\r\n                return res.status(404).json({ message: \"Không tìm thấy bài post\" });\r\n              }\r\n          \r\n              if (post.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bài viết này\" });\r\n              }\r\n              await Comment.deleteMany({ _id: { $in: post.comments } });\r\n              await Post.findByIdAndDelete(postId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bài viết thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bài viết:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bài viết\" });\r\n            }\r\n          }          \r\n        }\r\n export default PostController"],"file":"PostController.dev.js"}
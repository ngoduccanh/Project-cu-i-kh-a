{"version":3,"sources":["PostController.js"],"names":["PostController","createPost","req","res","body","image","caption","status","json","error","newPost","Post","author","user","_id","likes","comments","save","message","post","getAllPosts","find","populate","path","select","sort","createdAt","posts","getUserPosts","userId","getPostsByUserId","params","console","createComment","postId","text","comment","Comment","findById","push","populatedComment","getComments","DeleteComment","commentId","toString","findByIdAndUpdate","$pull","findByIdAndDelete","DeletePost","deleteMany","$in","SavedPost","Shape","findOne","existing","saved","GetSavedPost","deleteSavedPost","deleteOne"],"mappings":"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","sourcesContent":["import Post from \"../Model/Post.js\"\r\nimport Comment from \"../Model/Comment.js\"\r\nimport Shape from \"../Model/Shape.js\";\r\n const PostController = {\r\n     createPost: async (req, res) => {\r\n        const { image, caption } = req.body;\r\n        if (!caption) return res.status(400).json({ error: 'Image bắt buộc' });\r\n      \r\n        try {\r\n          const newPost = new Post({\r\n            author: req.user._id,\r\n            image,\r\n            caption,\r\n            likes: [],\r\n            comments: []\r\n          });\r\n          await newPost.save();\r\n          res.status(201).json({ message: 'Tạo post thành công', post: newPost });\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi tạo post' });\r\n        }\r\n      },\r\n      getAllPosts: async (req, res) => {\r\n        try {\r\n          const posts = await Post.find()\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n      \r\n          res.json(posts);\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts' });\r\n        }\r\n      },\r\n      getUserPosts: async (req, res) => {\r\n        try {\r\n          const userId = req.user._id;  \r\n          const posts = await Post.find({ author: userId })\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n          res.json({ posts }); \r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts của user' });\r\n        }\r\n      },\r\n      getPostsByUserId: async (req, res) => {\r\n        try {\r\n          const { userId } = req.params;\r\n          const posts = await Post.find({ author: userId })\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n\r\n          res.json({ posts });\r\n        } catch (err) {\r\n          console.error(\"Lỗi khi lấy post của userId:\", err);\r\n          res.status(500).json({ error: 'Lỗi khi lấy bài viết của người dùng' });\r\n        }\r\n      },\r\n      createComment: async (req, res) => {\r\n        const { postId, text } = req.body;\r\n        if (!text) return res.status(400).json({ error: 'Text bắt buộc' });\r\n      \r\n        try {\r\n          const comment = new Comment({\r\n            post: postId,\r\n            author: req.user._id,\r\n            text\r\n          });\r\n          await comment.save();\r\n      \r\n          const post = await Post.findById(postId);\r\n          post.comments.push(comment._id);\r\n          await post.save();\r\n          const populatedComment = await Comment.findById(comment._id)\r\n            .populate(\"author\", \"username avatar\");\r\n      \r\n          res.status(201).json({\r\n            message: 'Tạo comment thành công',\r\n            comment: populatedComment\r\n          });\r\n        } catch (err) {\r\n          console.error(err);\r\n          res.status(500).json({ error: 'Lỗi khi tạo comment' });\r\n        }\r\n      },\r\n          getComments: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const comments = await Comment.find({ post: postId })\r\n              .populate('author', ['username', 'avatar'])\r\n              res.status(200).json(comments);\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi lấy bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi khi lấy bình luận\" });\r\n            }\r\n          },\r\n          DeleteComment: async (req, res) => {\r\n            const commentId = req.params.commentId;\r\n          \r\n            try {\r\n              const comment = await Comment.findById(commentId);\r\n              if (!comment) return res.status(404).json({ message: \"Không tìm thấy bình luận\" });\r\n              if (comment.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bình luận này\" });\r\n              }\r\n              await Post.findByIdAndUpdate(comment.post, {\r\n                $pull: { comments: comment._id }\r\n              });\r\n              await Comment.findByIdAndDelete(commentId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bình luận thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bình luận\" });\r\n            }\r\n          },\r\n          DeletePost: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const post = await Post.findById(postId);\r\n              if (!post) {\r\n                return res.status(404).json({ message: \"Không tìm thấy bài post\" });\r\n              }\r\n          \r\n              if (post.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bài viết này\" });\r\n              }\r\n              await Comment.deleteMany({ _id: { $in: post.comments } });\r\n              await Post.findByIdAndDelete(postId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bài viết thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bài viết:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bài viết\" });\r\n            }\r\n          },\r\n          SavedPost: async(req,res) =>{\r\n            const { postId } = req.body;\r\n            const userId = req.user._id;\r\n            try {\r\n              const existing = await Shape.findOne({ user: userId, post: postId });\r\n              if (existing) return res.status(400).json({ message: \"Đã lưu trước đó\" });\r\n\r\n              const saved = new Shape({ user: userId, post: postId });\r\n              await saved.save();\r\n              res.status(201).json({ message: \"Đã shape bài viết\" });\r\n            } catch (err) {\r\n              res.status(500).json({ message: \"Lỗi server\", error: err.message });\r\n            }\r\n          },\r\n          GetSavedPost: async(req,res) =>{\r\n            try {\r\n              const userId = req.user._id;\r\n               const saved = await Shape.find({ user: userId })\r\n                .populate({\r\n                  path: \"post\",\r\n                  populate: {\r\n                    path: \"author\",\r\n                    select: \"username avatar\", \r\n                  },\r\n                });\r\n              res.json(saved);\r\n            } catch (err) {\r\n              res.status(500).json({ message: \"Lỗi khi lấy danh sách\", error: err.message });\r\n            }\r\n          },\r\n          deleteSavedPost: async(req,res)=>{\r\n            const { postId } = req.params;\r\n            const userId = req.user._id;\r\n            try {\r\n              const saved = await Shape.findOne({ user: userId, post: postId });\r\n\r\n              if (!saved) {\r\n                return res.status(404).json({ message: 'Bài viết chưa được lưu hoặc đã bị xóa' });\r\n              }\r\n              await Shape.deleteOne({ _id: saved._id });\r\n              res.status(200).json({ message: 'Đã xóa bài viết đã lưu' });\r\n            } catch (error) {\r\n              console.error('Lỗi khi xóa bài viết đã lưu:', error);\r\n              res.status(500).json({ message: 'Lỗi máy chủ' });\r\n            }\r\n          }\r\n        }\r\n export default PostController"],"file":"PostController.dev.js"}
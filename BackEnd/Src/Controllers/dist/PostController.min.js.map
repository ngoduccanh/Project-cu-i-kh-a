{"version":3,"sources":["PostController.js"],"names":["_Post","_interopRequireDefault","require","_Comment","_Shape","PostController","createPost","req","res","_req$body","image","caption","newPost","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","json","error","Post","author","user","_id","likes","comments","awrap","save","message","post","t0","stop","getAllPosts","posts","_context2","find","populate","path","select","sort","createdAt","sent","userId","_context3","getPostsByUserId","_context4","params","console","createComment","_req$body2","postId","text","comment","populatedComment","_context5","Comment","findById","push","_context6","DeleteComment","commentId","_context7","toString","findByIdAndDelete","DeletePost","_context8","$in","SavedPost","saved","_context9","Shape","findOne","_context10","deleteSavedPost","_context11","deleteOne"],"mappings":"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","file":"PostController.min.js","sourcesContent":["import Post from \"../Model/Post.js\"\r\nimport Comment from \"../Model/Comment.js\"\r\nimport Shape from \"../Model/Shape.js\";\r\n const PostController = {\r\n     createPost: async (req, res) => {\r\n        const { image, caption } = req.body;\r\n        if (!caption) return res.status(400).json({ error: 'Image bắt buộc' });\r\n      \r\n        try {\r\n          const newPost = new Post({\r\n            author: req.user._id,\r\n            image,\r\n            caption,\r\n            likes: [],\r\n            comments: []\r\n          });\r\n          await newPost.save();\r\n          res.status(201).json({ message: 'Tạo post thành công', post: newPost });\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi tạo post' });\r\n        }\r\n      },\r\n      getAllPosts: async (req, res) => {\r\n        try {\r\n          const posts = await Post.find()\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n      \r\n          res.json(posts);\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts' });\r\n        }\r\n      },\r\n      getUserPosts: async (req, res) => {\r\n        try {\r\n          const userId = req.user._id;  \r\n          const posts = await Post.find({ author: userId })\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n          res.json({ posts }); \r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts của user' });\r\n        }\r\n      },\r\n      getPostsByUserId: async (req, res) => {\r\n        try {\r\n          const { userId } = req.params;\r\n          const posts = await Post.find({ author: userId })\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n\r\n          res.json({ posts });\r\n        } catch (err) {\r\n          console.error(\"Lỗi khi lấy post của userId:\", err);\r\n          res.status(500).json({ error: 'Lỗi khi lấy bài viết của người dùng' });\r\n        }\r\n      },\r\n      createComment: async (req, res) => {\r\n        const { postId, text } = req.body;\r\n        if (!text) return res.status(400).json({ error: 'Text bắt buộc' });\r\n      \r\n        try {\r\n          const comment = new Comment({\r\n            post: postId,\r\n            author: req.user._id,\r\n            text\r\n          });\r\n          await comment.save();\r\n      \r\n          const post = await Post.findById(postId);\r\n          post.comments.push(comment._id);\r\n          await post.save();\r\n          const populatedComment = await Comment.findById(comment._id)\r\n            .populate(\"author\", \"username avatar\");\r\n      \r\n          res.status(201).json({\r\n            message: 'Tạo comment thành công',\r\n            comment: populatedComment\r\n          });\r\n        } catch (err) {\r\n          console.error(err);\r\n          res.status(500).json({ error: 'Lỗi khi tạo comment' });\r\n        }\r\n      },\r\n          getComments: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const comments = await Comment.find({ post: postId })\r\n              .populate('author', ['username', 'avatar'])\r\n              res.status(200).json(comments);\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi lấy bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi khi lấy bình luận\" });\r\n            }\r\n          },\r\n          DeleteComment: async (req, res) => {\r\n            const commentId = req.params.commentId;\r\n          \r\n            try {\r\n              const comment = await Comment.findById(commentId);\r\n              if (!comment) return res.status(404).json({ message: \"Không tìm thấy bình luận\" });\r\n              if (comment.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bình luận này\" });\r\n              }\r\n              await Post.findByIdAndUpdate(comment.post, {\r\n                $pull: { comments: comment._id }\r\n              });\r\n              await Comment.findByIdAndDelete(commentId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bình luận thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bình luận\" });\r\n            }\r\n          },\r\n          DeletePost: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const post = await Post.findById(postId);\r\n              if (!post) {\r\n                return res.status(404).json({ message: \"Không tìm thấy bài post\" });\r\n              }\r\n          \r\n              if (post.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bài viết này\" });\r\n              }\r\n              await Comment.deleteMany({ _id: { $in: post.comments } });\r\n              await Post.findByIdAndDelete(postId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bài viết thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bài viết:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bài viết\" });\r\n            }\r\n          },\r\n          SavedPost: async(req,res) =>{\r\n            const { postId } = req.body;\r\n            const userId = req.user._id;\r\n            try {\r\n              const existing = await Shape.findOne({ user: userId, post: postId });\r\n              if (existing) return res.status(400).json({ message: \"Đã lưu trước đó\" });\r\n\r\n              const saved = new Shape({ user: userId, post: postId });\r\n              await saved.save();\r\n              res.status(201).json({ message: \"Đã shape bài viết\" });\r\n            } catch (err) {\r\n              res.status(500).json({ message: \"Lỗi server\", error: err.message });\r\n            }\r\n          },\r\n          GetSavedPost: async(req,res) =>{\r\n            try {\r\n              const userId = req.user._id;\r\n               const saved = await Shape.find({ user: userId })\r\n                .populate({\r\n                  path: \"post\",\r\n                  populate: {\r\n                    path: \"author\",\r\n                    select: \"username avatar\", \r\n                  },\r\n                });\r\n              res.json(saved);\r\n            } catch (err) {\r\n              res.status(500).json({ message: \"Lỗi khi lấy danh sách\", error: err.message });\r\n            }\r\n          },\r\n          deleteSavedPost: async(req,res)=>{\r\n            const { postId } = req.params;\r\n            const userId = req.user._id;\r\n            try {\r\n              const saved = await Shape.findOne({ user: userId, post: postId });\r\n\r\n              if (!saved) {\r\n                return res.status(404).json({ message: 'Bài viết chưa được lưu hoặc đã bị xóa' });\r\n              }\r\n              await Shape.deleteOne({ _id: saved._id });\r\n              res.status(200).json({ message: 'Đã xóa bài viết đã lưu' });\r\n            } catch (error) {\r\n              console.error('Lỗi khi xóa bài viết đã lưu:', error);\r\n              res.status(500).json({ message: 'Lỗi máy chủ' });\r\n            }\r\n          }\r\n        }\r\n export default PostController"]}
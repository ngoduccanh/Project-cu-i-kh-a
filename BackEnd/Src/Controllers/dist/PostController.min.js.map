{"version":3,"sources":["PostController.js"],"names":["_Post","_interopRequireDefault","require","_Comment","PostController","createPost","req","res","_req$body","image","caption","newPost","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","json","error","Post","author","user","_id","likes","awrap","save","message","post","t0","stop","getAllPosts","posts","_context2","find","populate","path","select","createdAt","sent","userId","_context3","comments","createComment","_req$body2","postId","text","comment","populatedComment","_context4","Comment","findById","push","console","_context5","params","DeleteComment","commentId","_context6","toString","findByIdAndUpdate","$pull","findByIdAndDelete","DeletePost","_context7","deleteMany","$in"],"mappings":"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","file":"PostController.min.js","sourcesContent":["import Post from \"../Model/Post.js\"\r\nimport Comment from \"../Model/Comment.js\"\r\n const PostController = {\r\n     createPost: async (req, res) => {\r\n        const { image, caption } = req.body;\r\n        if (!caption) return res.status(400).json({ error: 'Image bắt buộc' });\r\n      \r\n        try {\r\n          const newPost = new Post({\r\n            author: req.user._id,\r\n            image,\r\n            caption,\r\n            likes: [],\r\n            comments: []\r\n          });\r\n          await newPost.save();\r\n          res.status(201).json({ message: 'Tạo post thành công', post: newPost });\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi tạo post' });\r\n        }\r\n      },\r\n      getAllPosts: async (req, res) => {\r\n        try {\r\n          const posts = await Post.find()\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n      \r\n          res.json(posts);\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts' });\r\n        }\r\n      },\r\n      getUserPosts: async (req, res) => {\r\n        try {\r\n          const userId = req.user._id;  \r\n          const posts = await Post.find({ author: userId })\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n          res.json({ posts }); \r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts của user' });\r\n        }\r\n      },\r\n      createComment: async (req, res) => {\r\n        const { postId, text } = req.body;\r\n        if (!text) return res.status(400).json({ error: 'Text bắt buộc' });\r\n      \r\n        try {\r\n          const comment = new Comment({\r\n            post: postId,\r\n            author: req.user._id,\r\n            text\r\n          });\r\n          await comment.save();\r\n      \r\n          const post = await Post.findById(postId);\r\n          post.comments.push(comment._id);\r\n          await post.save();\r\n          const populatedComment = await Comment.findById(comment._id)\r\n            .populate(\"author\", \"username avatar\");\r\n      \r\n          res.status(201).json({\r\n            message: 'Tạo comment thành công',\r\n            comment: populatedComment\r\n          });\r\n        } catch (err) {\r\n          console.error(err);\r\n          res.status(500).json({ error: 'Lỗi khi tạo comment' });\r\n        }\r\n      },\r\n          getComments: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const comments = await Comment.find({ post: postId })\r\n              .populate('author', ['username', 'avatar'])\r\n              res.status(200).json(comments);\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi lấy bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi khi lấy bình luận\" });\r\n            }\r\n          },\r\n          DeleteComment: async (req, res) => {\r\n            const commentId = req.params.commentId;\r\n          \r\n            try {\r\n              const comment = await Comment.findById(commentId);\r\n              if (!comment) return res.status(404).json({ message: \"Không tìm thấy bình luận\" });\r\n              if (comment.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bình luận này\" });\r\n              }\r\n              await Post.findByIdAndUpdate(comment.post, {\r\n                $pull: { comments: comment._id }\r\n              });\r\n              await Comment.findByIdAndDelete(commentId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bình luận thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bình luận:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bình luận\" });\r\n            }\r\n          },\r\n          DeletePost: async (req, res) => {\r\n            const postId = req.params.postId;\r\n            try {\r\n              const post = await Post.findById(postId);\r\n              if (!post) {\r\n                return res.status(404).json({ message: \"Không tìm thấy bài post\" });\r\n              }\r\n          \r\n              if (post.author.toString() !== req.user._id.toString()) {\r\n                return res.status(403).json({ message: \"Bạn không có quyền xóa bài viết này\" });\r\n              }\r\n              await Comment.deleteMany({ _id: { $in: post.comments } });\r\n              await Post.findByIdAndDelete(postId);\r\n          \r\n              res.status(200).json({ message: \"Xóa bài viết thành công\" });\r\n            } catch (error) {\r\n              console.error(\"Lỗi khi xoá bài viết:\", error);\r\n              res.status(500).json({ message: \"Lỗi server khi xoá bài viết\" });\r\n            }\r\n          }          \r\n        }\r\n export default PostController"]}
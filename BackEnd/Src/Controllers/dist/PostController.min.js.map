{"version":3,"sources":["PostController.js"],"names":["_Post","_interopRequireDefault","require","_Comment","PostController","createPost","req","res","_req$body","image","caption","newPost","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","json","error","Post","author","user","_id","likes","awrap","save","message","post","t0","stop","getAllPosts","posts","_context2","find","populate","path","select","createdAt","sent","userId","comments","createComment","_req$body2","postId","text","comment","_context4","Comment","findById","push"],"mappings":"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","file":"PostController.min.js","sourcesContent":["import Post from \"../Model/Post.js\"\r\nimport Comment from \"../Model/Comment.js\"\r\n const PostController = {\r\n     createPost: async (req, res) => {\r\n        const { image, caption } = req.body;\r\n        if (!caption) return res.status(400).json({ error: 'Image bắt buộc' });\r\n      \r\n        try {\r\n          const newPost = new Post({\r\n            author: req.user._id,\r\n            image,\r\n            caption,\r\n            likes: [],\r\n            comments: []\r\n          });\r\n          await newPost.save();\r\n          res.status(201).json({ message: 'Tạo post thành công', post: newPost });\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi tạo post' });\r\n        }\r\n      },\r\n      getAllPosts: async (req, res) => {\r\n        try {\r\n          const posts = await Post.find()\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n              path: 'comments',\r\n              populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n      \r\n          res.json(posts);\r\n        } catch (err) {\r\n          res.status(500).json({ error: 'Lỗi khi lấy posts' });\r\n        }\r\n      },\r\n    getUserPosts: async (req, res) => {\r\n        const userId = req.params.userId;\r\n        try {\r\n              const posts = await Post.find({ author: userId })\r\n            .populate('author', 'username avatar')\r\n            .populate({\r\n                path: 'comments',\r\n                populate: { path: 'author', select: 'username avatar' }\r\n            })\r\n            .sort({ createdAt: -1 });\r\n            res.json(posts);\r\n        } catch (err) {\r\n            res.status(500).json({ error: 'Lỗi khi lấy posts của user' });\r\n        }\r\n        },\r\n    createComment : async (req, res) => {\r\n            const { postId, text } = req.body;\r\n            if (!text) return res.status(400).json({ error: 'Text bắt buộc' });\r\n            try {\r\n              const comment = new Comment({\r\n                post: postId,\r\n                author: req.user._id,\r\n                text\r\n              });\r\n              await comment.save();\r\n              const post = await Post.findById(postId);\r\n              post.comments.push(comment._id);\r\n              await post.save();\r\n              res.status(201).json({ message: 'Tạo comment thành công', comment });\r\n            } catch (err) {\r\n              res.status(500).json({ error: 'Lỗi khi tạo comment' });\r\n            }\r\n          },\r\n    \r\n }\r\n export default PostController"]}
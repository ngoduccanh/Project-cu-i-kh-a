{"version":3,"sources":["UserController.js"],"names":["usersController","register","req","res","body","email","password","status","json","error","User","findOne","FindEmail","newAccont","save","message","login","user","bcrypt","compare","checkPassword","randomString","toString","apiKey","id","console","CreatUser","username","avatar","bio","age","gender","newUser","UserInfor","profileCreated","UpdateUser","userId","params","findById","_id"],"mappings":"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","sourcesContent":["import User from \"../Model/User.js\";\r\nimport bcrypt from 'bcrypt'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {randomBytes} from 'crypto'\r\nconst usersController = {\r\n    register: async (req,res) =>{\r\n        const {email,password}= req.body\r\n        if (!email || !password) {\r\n          return res.status(400).json({ error: 'Email và password là bắt buộc' });\r\n        }\r\n        const FindEmail = await User.findOne({email})\r\n          if(FindEmail){\r\n            return res.status(404).json({ error: 'Email đã tồn tại' });\r\n        }\r\n        const newAccont = new User({\r\n            email,\r\n            password,\r\n        })\r\n        await newAccont.save();\r\n        return res.status(200).json({\r\n            message: 'Đăng kí thành công.',\r\n            newAccont,\r\n          });\r\n    },\r\n    login: async (req, res) => {\r\n        const { email, password } = req.body;\r\n        if (!email || !password) {\r\n          return res.status(400).json({ error: 'Email và password là bắt buộc' });\r\n        }\r\n        try {\r\n          const user = await User.findOne({ email });\r\n          if (!user) {\r\n            return res.status(404).json({ error: 'Email không tồn tại.' });\r\n          }\r\n          const checkPassword = await bcrypt.compare(password, user.password);\r\n          if (!checkPassword) {\r\n            return res.status(401).json({ error: 'Sai mật khẩu.' });\r\n          }\r\n        const randomString = randomBytes(16).toString('hex');\r\n        const apiKey = `mern-${user.id}-${user.email}-${randomString}`;\r\n          return res.status(200).json({\r\n            message: 'Đăng nhập thành công.',\r\n            user,\r\n            apiKey,\r\n          });\r\n        } catch (error) {\r\n          console.error(error);\r\n          return res.status(500).json({ error: 'Lỗi hệ thống' });\r\n        }\r\n      },\r\n    CreatUser: async (req,res) => {\r\n        const {username,avatar,bio,age,gender} = req.body\r\n        if (!username){\r\n            return res.status(400).json({\r\n                message: 'username không được để trống '\r\n            })\r\n        }\r\n        try{\r\n        const newUser = new User({\r\n            username,\r\n            age,\r\n            gender,\r\n            avatar,\r\n            bio\r\n        })\r\n        await newUser.save();\r\n        res.status(201).json({\r\n            message: \"Tạo mới User thành công\",\r\n            user: {\r\n                id: uuidv4(),\r\n                username: newUser.username,\r\n            }\r\n        })\r\n        }catch(error){\r\n            console.error(error);\r\n        return res.status(500).json({error:\" Lỗi hệ thống\"})\r\n        }\r\n    },\r\n    UserInfor: async (req, res) => {\r\n      try {\r\n        const user = req.user; \r\n        if (!user) {\r\n          return res.status(404).json({ message: \"Không tìm thấy người dùng\" });\r\n        }\r\n        const profileCreated = user.username && user.age;\r\n    \r\n        res.json({\r\n          profileCreated: !!profileCreated,\r\n          user: {\r\n            username: user.username,\r\n            avatar: user.avatar,\r\n            age: user.age,\r\n            gender: user.gender,\r\n            bio: user.bio,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: \"Lỗi khi lấy thông tin user\" });\r\n      }\r\n    },\r\n    UpdateUser: async (req,res) =>{\r\n        const {username,avatar,bio,age,gender} = req.body\r\n        const userId = req.params.userId\r\n        if(!username) {\r\n            res.status(400).json({\r\n                message: \"username không được để trống\"\r\n            })\r\n        }\r\n        try {\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n        return res.status(404).json({ message: \"User không tồn tại\" });\r\n        }\r\n        user.username = username;\r\n        if(age) user.age = age;\r\n        if(gender) user.gender = gender;\r\n        if (avatar) user.avatar = avatar;\r\n        if (bio) user.bio = bio;\r\n        await user.save();\r\n        res.status(200).json({\r\n            message: 'Cập nhật user thành công',\r\n            user: {\r\n              id: user._id,\r\n              username: user.username,\r\n            }\r\n          });\r\n        }catch(error){\r\n            console.error(error);\r\n            res.status(500).json({ error: 'Lỗi hệ thống' });\r\n\r\n        }\r\n    }\r\n}\r\nexport default usersController"],"file":"UserController.dev.js"}
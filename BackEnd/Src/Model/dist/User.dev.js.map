{"version":3,"sources":["User.js"],"names":["userSchema","mongoose","Schema","username","type","String","age","gender","email","required","password","avatar","bio","followers","Types","ObjectId","ref","following","timestamps","pre","next","user","isModified","length","err","Error","bcrypt","genSalt","salt","hash","User","model"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC;AADE,GAD2B;AAIrCC,EAAAA,GAAG,EAAE;AACHF,IAAAA,IAAI,EAAEC;AADH,GAJgC;AAOrCE,EAAAA,MAAM,EAAE;AACNH,IAAAA,IAAI,EAAEC,MADA;AAEN,YAAM,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB;AAFA,GAP6B;AAWrCG,EAAAA,KAAK,EAAE;AACLJ,IAAAA,IAAI,EAAEC,MADD;AAELI,IAAAA,QAAQ,EAAE;AAFL,GAX8B;AAerCC,EAAAA,QAAQ,EAAE;AACRN,IAAAA,IAAI,EAAEC;AADE,GAf2B;AAkBrCM,EAAAA,MAAM,EAAE;AACNP,IAAAA,IAAI,EAAEC,MADA;AAEN,eAAS;AAFH,GAlB6B;AAsBrCO,EAAAA,GAAG,EAAE;AACHR,IAAAA,IAAI,EAAEC,MADH;AAEH,eAAS;AAFN,GAtBgC;AA0BrCQ,EAAAA,SAAS,EAAE,CAAC;AACVT,IAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBY,KAAhB,CAAsBC,QADlB;AAEVC,IAAAA,GAAG,EAAE;AAFK,GAAD,CA1B0B;AA8BrCC,EAAAA,SAAS,EAAE,CAAC;AACVb,IAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBY,KAAhB,CAAsBC,QADlB;AAEVC,IAAAA,GAAG,EAAE;AAFK,GAAD;AA9B0B,CAApB,EAkChB;AAAEE,EAAAA,UAAU,EAAE;AAAd,CAlCgB,CAAnB;AAmCAlB,UAAU,CAACmB,GAAX,CAAe,MAAf,EAAsB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,UAAAA,IADY,GACL,IADK;;AAAA,eAEdA,IAAI,CAACC,UAAL,CAAgB,UAAhB,CAFc;AAAA;AAAA;AAAA;;AAAA,gBAGV,CAACD,IAAI,CAACX,QAAN,IAAkBW,IAAI,CAACX,QAAL,CAAca,MAAd,GAAuB,CAH/B;AAAA;AAAA;AAAA;;AAINC,UAAAA,GAJM,GAIA,IAAIC,KAAJ,CAAU,kCAAV,CAJA;AAAA,2CAKLL,IAAI,CAACI,GAAD,CALC;;AAAA;AAAA;AAAA;AAAA,0CAQOE,mBAAOC,OAAP,CAAe,EAAf,CARP;;AAAA;AAQNC,UAAAA,IARM;AAAA;AAAA,0CASUF,mBAAOG,IAAP,CAAYR,IAAI,CAACX,QAAjB,EAA2BkB,IAA3B,CATV;;AAAA;AASZP,UAAAA,IAAI,CAACX,QATO;AAAA,2CAULU,IAAI,EAVC;;AAAA;AAAA;AAAA;AAAA,2CAYLA,IAAI,aAZC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAgBA,IAAMU,IAAI,GAAG7B,qBAAS8B,KAAT,CAAe,MAAf,EAAuB/B,UAAvB,CAAb;;eACe8B,I","sourcesContent":["import mongoose from \"mongoose\";\r\nimport bcrypt from \"bcrypt\"\r\nconst userSchema = new mongoose.Schema({\r\n  username: {\r\n    type: String,\r\n  },\r\n  age: {\r\n    type: String,\r\n  },\r\n  gender: {\r\n    type: String,\r\n    enum: ['male', 'female', 'other'],\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n  },\r\n  avatar: {\r\n    type: String,\r\n    default: 'https://via.placeholder.com/150'\r\n  },\r\n  bio: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  followers: [{ \r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'User' \r\n  }],\r\n  following: [{ \r\n    type: mongoose.Schema.Types.ObjectId, \r\n    ref: 'User' \r\n  }],\r\n}, { timestamps: true });\r\nuserSchema.pre('save',async function (next) {\r\n    const user = this;\r\n    if (user.isModified('password')) {\r\n        if (!user.password || user.password.length < 6) {\r\n          const err = new Error('Mật khẩu phải có ít nhất 6 ký tự');\r\n          return next(err);\r\n        }\r\n        try {\r\n          const salt = await bcrypt.genSalt(10);\r\n          user.password = await bcrypt.hash(user.password, salt);\r\n          return next();\r\n        } catch (err) {\r\n          return next(err);\r\n        }\r\n    }\r\n})\r\nconst User = mongoose.model('User', userSchema)\r\nexport default User"],"file":"User.dev.js"}